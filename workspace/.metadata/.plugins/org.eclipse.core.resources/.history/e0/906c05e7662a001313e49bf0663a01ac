package com.example.getcoordinate;

import java.io.*;
import java.net.*;

import com.example.getcoordinate.R.id;

import android.os.Bundle;
import android.os.StrictMode;
import android.preference.PreferenceManager;
import android.app.Activity;
import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.SharedPreferences;
import android.text.InputType;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.widget.EditText;
import android.widget.TextView;

//新しく追加↓
import android.speech.RecognizerIntent;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;
import android.content.Intent;
import android.content.ActivityNotFoundException;

public class MainActivity extends Activity {

    @Override
    public void onCreate(Bundle savedInstanceState) {
    	super.onCreate(savedInstanceState);
    	setContentView(R.layout.activity_main);
    	//ver3.0から追加されたStrictModeに対するエラーの対処
    	StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder().permitAll().build());
    }
    
	int i=0;
	int x=0;
	int y=0;
	float tempX = 0;
	float tempY = 0;
	int z=140;
	float previousDistance=0;
	// タッチした時の時間
	long time=0;
	// スクリーンがタッチされたかどうかの判定
	public boolean onTouchEvent(MotionEvent event) {
    	move(event);
    	int a = event.getActionMasked();
    	Log.v("a",new Integer(a).toString());
      	int mx=y,mz=0;
		String[] strs = trans(mx,mz);
		String actionX = strs[0];
		String actionY = strs[1];
		String actionZ = strs[2];
		String actionXY = strs[3];
		//座標の表示
		TextView coordinate=(TextView)findViewById(id.text);
		TextView coordinate2=(TextView)findViewById(id.text2);
		coordinate.setText(actionXY);
		coordinate2.setText(actionZ);
		// 現在の時間
		long now = System.currentTimeMillis();
		// タッチした時間と現在の時間を比べる(ミリ秒)
		if ( (now - time) > 400) {
			connect(actionX,actionY,actionZ);
			time = now;
		}
		
    	return super.onTouchEvent(event);
    }

    @SuppressLint("FloatMath")
	private void move(MotionEvent event) {
    	//シングルタッチ
    	if(event.getPointerCount()==1) {
    		//座標の取得
    		tempY=(int) ((event.getY()-400));
    		tempX=(int) ((event.getX()-640));
    		/* 8画素を，1座標とする */
    		y=(int)( (tempY / 8) *(-1) );
	    	x=(int)( (tempX / 8) *(-1) );
	        //平行移動	
	        y+=90;
    	}
    	//マルチタッチ
    	else {
    		int pointer1=event.getPointerId(0);
    		int pointer2=event.getPointerId(1);
    		
    		int pointer_index_1 = event.findPointerIndex( pointer1 );
    		int pointer_index_2 = event.findPointerIndex( pointer2 );
    		
    		float tempX  = event.getX(pointer_index_2) - event.getX(pointer_index_1);
    		float tempY = event.getY(pointer_index_2) - event.getY(pointer_index_1);
    		// ボタン間の距離を求める    		
    		float distance = (float) Math.sqrt(tempX * tempX + tempY * tempY);
    		switch ( event.getAction() ) {
    		case MotionEvent.ACTION_MOVE:
    			//距離を狭めた場合
    			if( previousDistance > distance ) {
    				z += 7;
    			}
    			else {
    				z -= 7;
    			}
    			// zを140に固定する
    			z=140;
    		}
    		previousDistance = distance;
    	}
	}

	String[] trans(int mx, int mz) {
		String[] strs=new String[4];
    	if(i==0) {
			//座標系に合わせる
    		strs[0]=String.valueOf(y);
    		strs[1]=String.valueOf(x);
    		strs[2]=String.valueOf(z);
    		strs[3]=strs[1]+" * "+strs[0];
		}
		else {
			//座標変換
			double exRadians = Math.toRadians(i);
    		y=(int) ((y-90)*Math.cos(exRadians)-(-(230-z))*Math.sin(exRadians));
    		mz=(int) ((mx-90)*Math.sin(exRadians)+(-(230-z))*Math.cos(exRadians));
    		y=mx+y;
    		mz=z+70-(-mz);
    		strs[0]=String.valueOf(y);
    		strs[1]=String.valueOf(x);
			strs[2]=String.valueOf(mz);
			strs[3]=strs[0]+" * "+strs[1];
		}
		return strs;
    }
    void connect(String actionX, String actionY, String actionZ) {
    	//PCとの接続
    	Socket socket=null;
		try {
			SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(this);
			String ip=sp.getString("SaveString", null);
			int port=10000;
			socket=new Socket(ip,port);
			//座標の送信
			PrintWriter pw=new PrintWriter(socket.getOutputStream(),true);
			String action;
			if(i==-1) {
				action="exit";
			}
			else {
				action=actionX+", "+actionY+", "+actionZ+", -180, "+i;
			}
			pw.println(action);
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		if( socket != null){
			try {
				socket.close();
				socket = null;
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
    	getMenuInflater().inflate(R.menu.activity_main, menu);
    	return true;
    }
    
    @Override
    public boolean onMenuItemSelected(int featureId,MenuItem item) {
    	final EditText input=new EditText(this);
    	final EditText input1=new EditText(this);
    	input.setInputType(InputType.TYPE_CLASS_NUMBER);
    	switch(item.getItemId()) {
    	case R.id.menu1:
    		getTrans(input);
    		break;
    	case R.id.menu2:
    		getIP(input1);
    		break;
    	case R.id.menu3:
    		i=-1;
    		connect(null,null,null);
    		break;
    	default:
    		break;
    	}
    	return super.onOptionsItemSelected(item);
    }
	void getIP(final EditText input1) {
   		AlertDialog.Builder diag1=new AlertDialog.Builder(this);
		diag1.setTitle("IPアドレスの設定");
		diag1.setView(input1);
		diag1.setPositiveButton("OK", new DialogInterface.OnClickListener() {
			
	
			public void onClick(DialogInterface dialog, int which) {
				SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(getBaseContext());
    			sp.edit().putString("SaveString", input1.getText().toString()).commit();
			}
		});
		diag1.show();
	}
	void getTrans(final EditText input) {
		AlertDialog.Builder diag=new AlertDialog.Builder(this);
		diag.setTitle("回転する角度");
		diag.setMessage("0から90の間で入力");
		diag.setView(input);
		diag.setPositiveButton("OK", new DialogInterface.OnClickListener() {
			
		
			public void onClick(DialogInterface dialog, int which) {
				String stri=input.getText().toString();
				//座標変換するための数値に変換
				i=Integer.parseInt(stri);
				//範囲外が選択された場合ノーマルに戻る
				if((i>90)||(i<0))
				{
					i=0;
				}
			}
		});
		diag.setNegativeButton("cancel", new DialogInterface.OnClickListener() {
			
			
			public void onClick(DialogInterface dialog, int which) {
				
			}
		});
		diag.show();
	}
}